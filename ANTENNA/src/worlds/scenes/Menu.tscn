[gd_scene load_steps=9 format=2]

[ext_resource path="res://src/worlds/scripts/Menu.gd" type="Script" id=2]
[ext_resource path="res://src/UI/themes/MainMenu_theme.tres" type="Theme" id=3]
[ext_resource path="res://src/UI/background/space.png" type="Texture" id=4]
[ext_resource path="res://src/UI/background/title.png" type="Texture" id=5]

[sub_resource type="Shader" id=1]
code = "/* 
Earthbound battle backgrounds shader with scrolling effect and palette cycling like in the original game.
@retr0_dev
	
Apply the shader to a TextureRect or a Sprite. Use a texture with some shapes in a transparent background for best results.
You can then use a ColorRect or another method to paint the background.
You can use the shader on multiple TextureRects and obtain a double-buffer effect tweaking the values for each one, remember to Make Unique the shader material.
*/
shader_type canvas_item;

uniform float screen_height = 640.0;
uniform float amplitude = 0.075;
uniform float frequency = 10.0;
uniform float speed = 2.0;
uniform float amplitude_vertical = 0.0;
uniform float frequency_vertical = 0.0;
uniform float speed_vertical = 0.0;
uniform vec2 scroll_direction = vec2(0.0, 0.0);
uniform float scrolling_speed = 0.08;
uniform bool enable_palette_cycling = false;
uniform sampler2D palette;
uniform float palette_speed = 0.1;

void fragment()
{
	float diff_x = amplitude * sin((frequency * UV.y) + (speed * TIME));
	float diff_y = amplitude_vertical * sin((frequency_vertical * UV.y)  + (speed_vertical * TIME));
	vec2 scroll = scroll_direction * TIME * scrolling_speed;
	vec4 tex = texture(TEXTURE, vec2(UV.x + diff_x, UV.y + diff_y) + scroll);
	float palette_swap = mod(tex.r - TIME * palette_speed, 1.0);
	
	if (enable_palette_cycling)
	{
		COLOR = vec4(texture(palette, vec2(palette_swap, 0)).rgb, tex.a);
	}
	else COLOR = tex;
	COLOR = mix(vec4(0.0), COLOR, float(int(UV.y * screen_height) % 2));
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/screen_height = 640.0
shader_param/amplitude = 0.075
shader_param/frequency = 10.0
shader_param/speed = 2.0
shader_param/amplitude_vertical = 0.0
shader_param/frequency_vertical = 0.0
shader_param/speed_vertical = 0.0
shader_param/scroll_direction = Vector2( 0, 0 )
shader_param/scrolling_speed = 0.08
shader_param/enable_palette_cycling = false
shader_param/palette_speed = 0.1

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform float shake_power = 0.03;
uniform float shake_rate : hint_range( 0.0, 1.0 ) = 0.2;
uniform float shake_speed = 5.0;
uniform float shake_block_size = 30.5;
uniform float shake_color_rate : hint_range( 0.0, 1.0 ) = 0.01;

float random( float seed )
{
	return fract( 543.2543 * sin( dot( vec2( seed, seed ), vec2( 3525.46, -54.3415 ) ) ) );
}

void fragment( )
{
	float enable_shift = float(
		random( trunc( TIME * shake_speed ) )
	<	shake_rate
	);

	vec2 fixed_uv = SCREEN_UV;
	fixed_uv.x += (
		random(
			( trunc( SCREEN_UV.y * shake_block_size ) / shake_block_size )
		+	TIME
		) - 0.5
	) * shake_power * enable_shift;

	vec4 pixel_color = textureLod( SCREEN_TEXTURE, fixed_uv, 0.0 );
	pixel_color.r = mix(
		pixel_color.r
	,	textureLod( SCREEN_TEXTURE, fixed_uv + vec2( shake_color_rate, 0.0 ), 0.0 ).r
	,	enable_shift
	);
	pixel_color.b = mix(
		pixel_color.b
	,	textureLod( SCREEN_TEXTURE, fixed_uv + vec2( -shake_color_rate, 0.0 ), 0.0 ).b
	,	enable_shift
	);
	COLOR = pixel_color;
}
"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/shake_power = 0.03
shader_param/shake_rate = 0.2
shader_param/shake_speed = 5.0
shader_param/shake_block_size = 30.5
shader_param/shake_color_rate = 0.01

[node name="Menu" type="Node2D"]
script = ExtResource( 2 )

[node name="Menu" type="CanvasLayer" parent="."]

[node name="Space" type="Sprite" parent="Menu"]
material = SubResource( 2 )
position = Vector2( 640, 360 )
scale = Vector2( 4, 4 )
texture = ExtResource( 4 )

[node name="title" type="Sprite" parent="Menu"]
position = Vector2( 640, 360 )
texture = ExtResource( 5 )

[node name="Glitch" type="ColorRect" parent="Menu"]
material = SubResource( 4 )
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0, 0, 0, 0 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="Menu"]
margin_top = 520.0
margin_right = 1280.0
margin_bottom = 580.0
theme = ExtResource( 3 )
custom_constants/separation = 20
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Start" type="Button" parent="Menu/VBoxContainer"]
margin_right = 1280.0
margin_bottom = 32.0
focus_neighbour_top = NodePath("../Quit")
text = "start"

[node name="Quit" type="Button" parent="Menu/VBoxContainer"]
margin_top = 52.0
margin_right = 1280.0
margin_bottom = 84.0
focus_neighbour_bottom = NodePath("../Start")
text = "quit"

[connection signal="pressed" from="Menu/VBoxContainer/Start" to="." method="_on_Start_pressed"]
[connection signal="pressed" from="Menu/VBoxContainer/Quit" to="." method="_on_Quit_pressed"]
