[gd_scene load_steps=6 format=2]

[ext_resource path="res://src/sprites/boss.png" type="Texture" id=1]
[ext_resource path="res://src/worlds/scripts/Boss.gd" type="Script" id=2]
[ext_resource path="res://src/sounds/sfx/boss_hurt.wav" type="AudioStream" id=3]

[sub_resource type="Shader" id=1]
code = "/* 
Earthbound battle backgrounds shader with scrolling effect and palette cycling like in the original game.
@retr0_dev
	
Apply the shader to a TextureRect or a Sprite. Use a texture with some shapes in a transparent background for best results.
You can then use a ColorRect or another method to paint the background.
You can use the shader on multiple TextureRects and obtain a double-buffer effect tweaking the values for each one, remember to Make Unique the shader material.
*/
shader_type canvas_item;

uniform float screen_height = 2.0;
uniform float amplitude = 0.01;
uniform float frequency = 1.0;
uniform float speed = 0.5;
uniform float amplitude_vertical = 0.0;
uniform float frequency_vertical = 0.0;
uniform float speed_vertical = 0.0;
uniform vec2 scroll_direction = vec2(0.0, 0.0);
uniform float scrolling_speed = 0.08;
uniform bool enable_palette_cycling = false;
uniform sampler2D palette;
uniform float palette_speed = 0.1;

void fragment()
{
	float diff_x = amplitude * sin((frequency * UV.y) + (speed * TIME));
	float diff_y = amplitude_vertical * sin((frequency_vertical * UV.y)  + (speed_vertical * TIME));
	vec2 scroll = scroll_direction * TIME * scrolling_speed;
	vec4 tex = texture(TEXTURE, vec2(UV.x + diff_x, UV.y + diff_y) + scroll);
	float palette_swap = mod(tex.r - TIME * palette_speed, 1.0);
	
	if (enable_palette_cycling)
	{
		COLOR = vec4(texture(palette, vec2(palette_swap, 0)).rgb, tex.a);
	}
	else COLOR = tex;
	COLOR = mix(vec4(0.0), COLOR, float(int(UV.y * screen_height) % 2));
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/screen_height = 640.0
shader_param/amplitude = 0.075
shader_param/frequency = 10.0
shader_param/speed = 2.0
shader_param/amplitude_vertical = 0.0
shader_param/frequency_vertical = 0.0
shader_param/speed_vertical = 0.0
shader_param/scroll_direction = Vector2( 0, 0 )
shader_param/scrolling_speed = 0.08
shader_param/enable_palette_cycling = false
shader_param/palette_speed = 0.1

[node name="Boss" type="StaticBody2D"]
script = ExtResource( 2 )

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 2 )
texture = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionPolygon2D" parent="."]
polygon = PoolVector2Array( -152, -136, -176, -128, -184, -96, -192, -64, -184, -40, -168, -16, -152, 0, -160, 8, -176, 8, -176, 24, -264, 128, -128, 128, -128, -128 )

[node name="Area2D" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionPolygon2D" parent="Area2D"]
polygon = PoolVector2Array( -152, -136, -176, -128, -184, -96, -192, -64, -184, -40, -168, -16, -152, 0, -160, 8, -176, 8, -176, 24, -264, 128, -128, 128, -128, -128 )

[node name="head" type="Position2D" parent="."]
position = Vector2( -256, 104 )

[node name="arm" type="Position2D" parent="."]
position = Vector2( -256, -56 )

[node name="Timer" type="Timer" parent="."]

[node name="BossHurtSFX" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 3 )

[connection signal="area_entered" from="Area2D" to="." method="_on_Area2D_area_entered"]
[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
